#!/usr/local/bin/python

'''
			Parse a VCF file and identify the heterozygous germline variants that have GMAF >=5%
                        The VCF may contain multiple tumour samples and one normal
                  The VCF file is produced by Platypus and it has to be annotated by VEP.

BEGIN COPYRIGHT NOTICE

     filterHetGermline code -- (c) 2018 Dimitrios Kleftogiannis -- ICR -- www.icr.ac.uk

     Copyright 2018 Dimitrios Kleftogiannis Licensed under the
     Educational Community License, Version 2.0 (the "License"); you may
     not use this file except in compliance with the License. You may
     obtain a copy of the License at

     https://opensource.org/licenses/ECL-2.0

     Unless required by applicable law or agreed to in writing,
     software distributed under the License is distributed on an "AS IS"
     BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
     or implied. See the License for the specific language governing
     permissions and limitations under the License.

     Published reports of research using this code (or a modified version) should cite the 
     relevant article of this program.

     Comments and bug reports are welcome.
       
     Email to dimitrios.kleftogiannis@icr.ac.uk 
     
     I would also appreciate hearing about how you used this code, improvements that you have made to it.
 
     You are free to modify, extend or distribute this code, as long as this copyright notice is included whole and unchanged. 

END COPYRIGHT NOTICE
 
UTILITY
   The program takes as input a VCF file with one normal and more than one tumour files. The normal file name is given by the user as input.
   The program identifies heterozygous germline variants based on certain criteria described below, and reports the AF of all 
   samples for these positions. 


INPUT ARGUMENTS
    
    1. VCF file                     : a vcf file, preferably generated by Platypus annotated by VEP
    
    2. normalName                   : the normal sample identifier. This has to exactly as in the header 
                              
OUTPUT 
    
    The program parses the original VCF and generates a TAB limited file with the AF of the heterozygous germline variants.
    We uses specific criteria for this filtering that  are described below.

DEPENDENCIES
    
    This is a Python program, thus you need the Python 2 compiler to be installed in your computer.
    
    The program has been developed and tested in a Mac OS computer with El Capitan version 10.11.5
    
    The Python compiler used for development is the Python Python 2.7.10 (default, Oct 23 2015, 19:19:21)
    
    The program works for Unix-like systems but has not been tested for Windows operating systems. 
    
    The program has not been tested in Cygwing-like systems running under Windows operating systems.   

    The program depends on pysam libraries downloaded from http://pysam.readthedocs.io/en/latest/index.html

    The program also depends on samtools, so please make sure that SAMtools is installed and configured properly in your system

    You might need to add samtools in your path so after you intall SAMtools you might need a command like: 

    PATH=$PATH:/your/path/to/Samtools


RUNNING
	
	An execution example is as follows:

    python filterHetGermline.py vcfFile=CA36_MutPlat_20.vep.vcf normalName=GermlineA36

    To obtaine toy data used during the code developement please contact Dimitrios

'''

#modules we need, I might have some extra that didnt use in the final version, but I forgot to remove.
#Remember that this program is under-developement so you may find block of codes used for testing.
import sys
import os
import pysam
import re
from collections import defaultdict
from itertools import groupby
import datetime
import time
import gzip

#prints information about program's execution
def printUsage():
    print('To run this program please type the following:')
    print('\tpython filterHetGermline.py vcfFile=file.vep.vcf normal=NormalName\n')
    print('Where:\n') 
    print('\tfile.vep.vcf is VCF file annotated by VEP. Preferably in VCFv4.0 format as generated by the Platypus variant caller\n')
    print('\tNormalName is the name for the normal sample. It has to be the same in the header')

    print('\nExecution example:\n') 
    print('\tpython filterHetGermline.py vcfFile=CA36_MutPlat_20.vep.vcf normalName=GermlineA36 \n')
    print('Please give the arguments in the indicated order similar to the provided example!\n') 


def parseVCF(vcfFile,normalName,vcfPrefix):

    #mock variable
    a=0
    normalPOS=-2;
    header=''
    outGermFileName=vcfPrefix+'.HetGermline.txt'
    outGermFile=open(outGermFileName,'w')
    outGermFile.write('Chrom\tPosition'),
    #check if the file exists
    if os.path.exists(vcfFile):
        #the file exists
        InVcfFile=open(vcfFile,'r')
        for eachLine in InVcfFile:
            if eachLine[0]=='#' and eachLine[1]=='#':
                #this is the main header
                a=a+1
            elif eachLine[0]=='#' and eachLine[1]!='#':
                #this is the line I want to scan
                header=eachLine
                line=eachLine.rstrip('\n')
                tmp=line.split('\t')
                #the VCF format up to the 8 column is the same...
                #we want from 9 till the end....
                tmp=tmp[9:]
                #we need to scan the tmp and find where the normal is
                normalPOS=tmp.index(normalName)
                outGermFile.write('\tGermline')
                i=0
                for k in tmp:
                    if i!=normalPOS:
                        outGermFile.write('\t%s'%k)
                    i=i+1

                #print('Found at %d\n'%normalPOS)
            else:
                break
        outGermFile.write('\n')
        InVcfFile.close()
        #now we need to parse again the file and process the positions
        InVcfFile=open(vcfFile,'r')

        for eachLine in InVcfFile:
            #now simply skip the header
            if eachLine[0]!='#':
                line=eachLine.rstrip('\n')
                tmp=line.split('\t')
                chrom = tmp[0]
                pos = tmp[1]
                varID = tmp[2]
                ref = tmp[3]
                alt = tmp[4]
                qual = tmp[5]
                myfilter = tmp[6] 
                info = tmp[7]
                format = tmp[8]
                #take the fileds for normal and germline
                #this is a trick I do to find the germline based on its location in the header file
                variantValues=tmp[9:]
                k=0
                germline=''
                tumour=[]
                for idx in variantValues:
                    if k==normalPOS:
                        germline=idx
                        k=k+1
                    else:
                        tumour.append(idx)
                        k=k+1
                #take only the PASS
                if 'PASS' in myfilter:
                    #then we need to get the field that describes the VEP annotation
                    tmp=info.split(';')
                    #the VEP annotation is the last field and it is separated by ,
                    #so we need to split again the record and read the annotations to find the canonical
                    myField=tmp[-1]
                    vepAnnot=myField.split(',')
                    firstAnnotField=vepAnnot[0]
                    #we need now to split by | and get the fields that describe the GMAFs for different population groups
                    tmp=firstAnnotField.split('|')
                    GMAF=tmp[37]
                    AFR_MAF=tmp[38]
                    AMR_MAF=tmp[39]
                    EAS_MAF=tmp[40]
                    EUR_MAF=tmp[41]
                    SAS_MAF=tmp[42]
                    #for debug
                    #print(' %s --> %s - %s - %s - %s - %s - %s\n\n'%(tmp,GMAF,AFR_MAF,AMR_MAF,EAS_MAF,EUR_MAF,SAS_MAF))

                    #now we need to get the actual AF from GMAF field and check if greater than 0.05
                    tmp=GMAF.split(':')
                    GMAF_Base=tmp[0]
                    #we get rid of some cases that make the program crash....
                    if len(GMAF)==0 or len(tmp)>2 or GMAF_Base=='-' or len(GMAF_Base)>1:
                        #do nothing 
                        a=a+1
                    else:
                        GMAF_AF=float(tmp[1])
                        
                        #we accept only GMAF_AF > 0.05
                        if GMAF_AF>0.05:

                            #at this point of filtering the record is PASS and of acceptable AF compared to the population
                            #we need to check further if it is germline and heterozygous
                            
                            #check the germline fields, it has to be 1/0 or 0/1 
                            tmp=germline.split(':')
                            germline_GT=tmp[0]
                            germline_GL=tmp[1]
                            germline_GOF=tmp[2]
                            germline_GQ=int(tmp[3])
                            germline_NR=tmp[4]
                            germline_NV=tmp[5]

                            #for the case of more than alleles take the first one
                            if len(germline_NR)>1 and len(germline_NV)>1:
                                germline_NR=germline_NR.split(',')
                                germline_NR=germline_NR[0]
                                germline_NR=int(germline_NR)

                                germline_NV=germline_NV.split(',')
                                germline_NV=germline_NV[0]
                                germline_NV=int(germline_NV)
                            else:
                                germline_NR=int(germline_NR)
                                germline_NV=int(germline_NV)

                            germline_AF=0
                            if germline_NR>0:
                            #compute the AF
                                germline_AF=float(germline_NV)/float(germline_NR)
                            else:
                                germline_AF=0.0
                            
                            #this is a heterozygoys germline variant that fullfills all criteria so simply parse the tumour and write it...
                            if (germline_GT=='0/1' or germline_GT=='1/0') and germline_GQ>=10 and germline_NR>=10 and germline_NR>=3 and germline_AF>0:
                                outGermFile.write('%s\t%s\t%.3f'%(chrom,pos,germline_AF)),
                                for record in tumour:
                                    tmp=record.split(':')
                                    tumour_GT=tmp[0]
                                    tumour_GL=tmp[1]
                                    tumour_GOF=tmp[2]
                                    tumour_GQ=int(tmp[3])
                                    tumour_NR=tmp[4]
                                    tumour_NV=tmp[5]
                                    #for the case of more than alleles take the first one
                                    if len(tumour_NR)>1 and len(tumour_NV)>1:
                                        tumour_NR=tumour_NR.split(',')
                                        tumour_NR=tumour_NR[0]
                                        tumour_NR=int(tumour_NR)

                                        tumour_NV=tumour_NV.split(',')
                                        tumour_NV=tumour_NV[0]
                                        tumour_NV=int(tumour_NV)
                                    else:
                                        tumour_NR=int(tumour_NR)
                                        tumour_NV=int(tumour_NV)

                                    #TODO
                                    #here be careful; for the time being we write all records found
                                    #if we want to be more strict we can simply write those where tumour_NR>=10 for all samples....

                                    if tumour_NR>0:
                                        tumour_AF=float(tumour_NV)/float(tumour_NR)
                                        outGermFile.write('\t%.3f'%tumour_AF),
                                    else:
                                        tumour_AF=0.0
                                        outGermFile.write('\t%.3f'%tumour_AF),

                                outGermFile.write('\n')
        outGermFile.close()

    else:
        ts = time.time()
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        print('[%s] ERROR from function: parseVCF. The input VCF file does not exist!\n'%(st))
        print('************************************************************************************************************************************\n')
        sys.exit()

#main function of the program
def myMain():
    #check the number of input arguments
    if len(sys.argv)!=3:
        print('************************************************************************************************************************************\n')
        print('\t\t\t\t\tYour input arguments are not correct!\n')
        print('\t\t\t\t\t\tCEC Bioinformatics Team\n')
        print('\t\t\tCopyright 2018 ICR -- Dimitrios Kleftogiannis -- dimitrios.kleftogiannis@icr.ac.uk\n')
        printUsage()
    else:
        print('************************************************************************************************************************************\n')
        print('\tfilterHetGermline.py: Parse a VCF annotated by VEP, identify the heterozygous germline variants and report AFs in a flat file\n')
        print('\t\t\t\t\t\t\tCEC Bioinformatics Team\n')
        print('\t\t\t\tCopyright 2017 ICR -- Dimitrios Kleftogiannis -- dimitrios.kleftogiannis@icr.ac.uk\n')
        #parse the first input arguments 
        #here if the user does not write the correct argument name it gets an error and the program stops
        vcfFile=sys.argv[1].split('vcfFile=')
        vcfFile=vcfFile[1]
        #parse the second argument
        normalName=sys.argv[2].split('normalName=')
        normalName=normalName[1]
        #print the arguments given by user; is good for 'self' debugging
        print('Execution started with the following parameters:\n')
        print('1. vcfFile         :         \t\t\t\t%s' % vcfFile)
        print('2. normalName      :         \t\t\t\t%s' % normalName)
        
        #find the prefix of the VCF
        #the file has to be separated by '_'
        #based on our format the patients name is always the first
        vcfPrefix=vcfFile[:-4]

        #generate the sam file
        ts = time.time()
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        print('\n[%s] Function parseVCF: parsing the input VCF'%(st))
        parseVCF(vcfFile,normalName,vcfPrefix)

#this is where we start
if __name__=='__main__':
    myMain()




