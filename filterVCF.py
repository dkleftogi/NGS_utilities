#!/usr/local/bin/python

'''
			Parse a VCF file in gz format and identify the somatic variants and the germline variants
                        The VCF may contain multiple tumour samples and one normal

BEGIN COPYRIGHT NOTICE

     filterVCF code -- (c) 2017 Dimitrios Kleftogiannis -- ICR -- www.icr.ac.uk

     Copyright 2017 Dimitrios Kleftogiannis Licensed under the
     Educational Community License, Version 2.0 (the "License"); you may
     not use this file except in compliance with the License. You may
     obtain a copy of the License at

     https://opensource.org/licenses/ECL-2.0

     Unless required by applicable law or agreed to in writing,
     software distributed under the License is distributed on an "AS IS"
     BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
     or implied. See the License for the specific language governing
     permissions and limitations under the License.

     Published reports of research using this code (or a modified version) should cite the 
     relevant article of this program.
  
     Comments and bug reports are welcome.
       
     Email to dimitrios.kleftogiannis@icr.ac.uk 
     
     I would also appreciate hearing about how you used this code, improvements that you have made to it.
 
     You are free to modify, extend or distribute this code, as long as this copyright notice is included whole and unchanged. 

END COPYRIGHT NOTICE
 
UTILITY
   This program takes as input a VCF file in gz format with one normal and more than tumour files. The normal file name is given by the user.
   The program identifies somatic and germline variants based on certain criteria.


INPUT ARGUMENTS
    
    1. VCF file                     : a vcf file in gz format, preferably generated by Platypus
    
    2. normalName                   : the normal sample identifier. This has to be similar to the header 
                              
OUTPUT 
    
    The program parses the original VCF in gz format and generates one file with the somatic cals and another with
    the germline calls. We uses specific criteria for this filtering that  are described below.

DEPENDENCIES
    
    This is a Python program, thus you need the Python 2 compiler to be installed in your computer.
    
    The program has been developed and tested in a Mac OS computer with El Capitan version 10.11.5
    
    The Python compiler used for development is the Python Python 2.7.10 (default, Oct 23 2015, 19:19:21)
    
    The program works for Unix-like systems but has not been tested for Windows operating systems. 
    
    The program has not been tested in Cygwing-like systems running under Windows operating systems.   

    The program depends on pysam libraries downloaded from http://pysam.readthedocs.io/en/latest/index.html

    The program also depends on samtools, so please make sure that SAMtools is installed and configured properly in your system

    You might need to add samtools in your path so after you intall SAMtools you might need a command like: 

    PATH=$PATH:/your/path/to/Samtools


RUNNING
	
	An execution example is as follows:

    python filterVCF.py vcfFile=CA36_MutPlat_20.vep.vcf.gz normalName=GermlineA36

    To obtaine toy data used during the code developement please contact Dimitrios

'''

#modules we need, I might have some extra that didnt use in the final version, but I forgot to remove.
#Remember that this program is under-developement so you may find block of codes used for testing.
import sys
import os
import pysam
import re
from collections import defaultdict
from itertools import groupby
import datetime
import time
import gzip

#prints information about program's execution
def printUsage():
    print('To run this program please type the following:')
    print('\tpython filterVCF.py vcfFile=file.vcf.gz normal=NormalName\n')
    print('Where:\n') 
    print('\tfile.vcf.gz is VCF file in gz format. Preferably in VCFv4.0 format\n')
    print('\tNormalName is the name for the normal sample. It has to be the same in the header')

    print('\nExecution example:\n') 
    print('\tpython filterVCF.py vcfFile=CA36_MutPlat_20.vep.vcf.gz normalName=GermlineA36 \n')
    print('Please give the arguments in the indicated order similar to the provided example!\n') 


#the function that does the job...
#the criteria we use are the following

#germline
#GT=0/0
#GQ>=10
#NR>=10
#NV>0
#AF>0

#somatic
#first it has not to be germline
#GT!=./.
#GT!=0/0
#GQ>=10
#NR>=10
#NV>=3
#AF>0

#we also condider specific filters returned by Platypus: PASS, alleleBias, Q20 , QD , SC, HapScore

#A limitation of the code is the FORMAT field that we assume always GT:GL:GOF:GQ:NR:NV as reported by platypus
#This has to be changed in the future

def parseVCF(vcfFile,normalName,vcfPrefix):

    #mock variable
    a=0
    normalPOS=-2;
    header=''
    #check if the file exists
    if os.path.exists(vcfFile):
        #the file exists so open it and read it

        #first find the location of the normal file in the header
        InVcfFile=gzip.open(vcfFile,'r')
        for eachLine in InVcfFile:
            if eachLine[0]=='#' and eachLine[1]=='#':
                #this is the main header
                a=a+1
            elif eachLine[0]=='#' and eachLine[1]!='#':
                #this is the line I want to scan
                header=eachLine
                line=eachLine.rstrip('\n')
                tmp=line.split('\t')
                #the VCF format up to the 8 column is the same...
                #we want from 9 till the end....
                tmp=tmp[9:]
                #we need to scan the tmp and find where the normal is
                normalPOS=tmp.index(normalName)
                #print('Found at %d\n'%normalPOS)
            else:
                break
        InVcfFile.close()
        #now we need to parse again the file and process the positions
        InVcfFile=gzip.open(vcfFile,'r')
        outGermFileName=vcfPrefix+'.germline.txt'
        outSomaFileName=vcfPrefix+'.somatic.txt'
        outGermFile=open(outGermFileName,'w')
        outSomaFile=open(outSomaFileName,'w')
        outSomaFile.write(header)
        outGermFile.write(header)
        for eachLine in InVcfFile:
            #now simply skip the header
            if eachLine[0]!='#':
                line=eachLine.rstrip('\n')
                tmp=line.split('\t')
                chrom = tmp[0]
                pos = tmp[1]
                varID = tmp[2]
                ref = tmp[3]
                alt = tmp[4]
                qual = tmp[5]
                myfilter = tmp[6] 
                info = tmp[7]
                format = tmp[8]
                #germline = tmp[9+normalPOS]
                #take the fileds for normal and germline
                #this is a trick I do to find the germline based on its location in the header file
                variantValues=tmp[9:]
                k=0
                germline=''
                tumour=[]
                for idx in variantValues:
                    if k==normalPOS:
                        germline=idx
                        k=k+1
                    else:
                        tumour.append(idx)
                        k=k+1
                #print(germline),
                #print(' with '),
                #print(tumour)
                #we have the data we need and we can do the processing
                #check first the FILTER flag: we accept only PASS, alleleBias, Q20 , QD , SC, HapScore
                if 'GOF' in myfilter or 'badReads' in myfilter or 'hp10' in myfilter or 'MQ' in myfilter or 'strandBias' in myfilter or 'QualDepth' in myfilter:
                    #this we dont accept because of the filter flag
                    a=a+1
                else:
                    #check first the germline
                    tmp=germline.split(':')
                    germline_GT=tmp[0]
                    germline_GL=tmp[1]
                    germline_GOF=tmp[2]
                    germline_GQ=int(tmp[3])
                    germline_NR=tmp[4]
                    germline_NV=tmp[5]
                    #for the case of more than alleles take the first one
                    if len(germline_NR)>1 and len(germline_NV)>1:
                        germline_NR=germline_NR.split(',')
                        germline_NR=germline_NR[0]
                        germline_NR=int(germline_NR)

                        germline_NV=germline_NV.split(',')
                        germline_NV=germline_NV[0]
                        germline_NV=int(germline_NV)
                    else:
                        germline_NR=int(germline_NR)
                        germline_NV=int(germline_NV)

                    if germline_NR>0:
                        germline_AF=float(germline_NV)/float(germline_NR)
                        if germline_GT!='0/0' and germline_GQ>=10 and germline_NR>=10 and germline_NV!=0 and germline_AF!=0.00:
                        #this is a germline so write it 
                            #if germline_GT=='1/0' or germline_GT=='0/1':
                            outGermFile.write(eachLine)
                            #outGermFile.write('%s\t%s\t%d\t%d\t%d\t%f\n'%(pos,germline_GT,germline_GQ,germline_NR,germline_NV,germline_AF))
                        else:
                            
                            #here we scan for somatic by scanning the tumour list
                            isSomatic=-1
                            for record in tumour:
                                tmp=record.split(':')
                                tumour_GT=tmp[0]
                                tumour_GL=tmp[1]
                                tumour_GOF=tmp[2]
                                tumour_GQ=int(tmp[3])
                                tumour_NR=tmp[4]
                                tumour_NV=tmp[5]

                                #for the case of more than alleles take the first one
                                if len(tumour_NR)>1 and len(tumour_NV)>1:
                                    tumour_NR=tumour_NR.split(',')
                                    tumour_NR=tumour_NR[0]
                                    tumour_NR=int(tumour_NR)

                                    tumour_NV=tumour_NV.split(',')
                                    tumour_NV=tumour_NV[0]
                                    tumour_NV=int(tumour_NV)
                                else:
                                    tumour_NR=int(tumour_NR)
                                    tumour_NV=int(tumour_NV)

                                #check if this is a somatic

                                if tumour_NR>0:
                                    tumour_AF=float(tumour_NV)/float(tumour_NR)
                                    #print('%s\t%s\t%d\t%d\t%d\t%f\n'%(pos,tumour_GT,tumour_GQ,tumour_NR,tumour_NV,tumour_AF))
                                    if germline_GT=='0/0' and germline_GQ>=10 and germline_NR>=10 and germline_NV==0 and germline_AF==0.00 and (tumour_GT!='0/0' and tumour_GT!='./.') and tumour_GQ>=10 and tumour_NR>=10 and tumour_NV>=3 and tumour_AF>0.00:
                                        #this is a somatic...
                                        
                                        isSomatic=1
                            #there is at least one somatic so write it
                            if isSomatic==1:
                                outSomaFile.write(eachLine)
                del germline
                del tumour
        outSomaFile.close()
        outGermFile.close()  
        InVcfFile.close()

    else:
        ts = time.time()
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        print('[%s] ERROR from function: parseVCF. The input VCF file does not exist!\n'%(st))
        print('************************************************************************************************************************************\n')
        sys.exit()

#main function of the program
def myMain():
    #check the number of input arguments
    if len(sys.argv)!=3:
        print('************************************************************************************************************************************\n')
        print('\t\t\t\t\tYour input arguments are not correct!\n')
        print('\t\t\t\t\t\tCEC Bioinformatics Team\n')
        print('\t\t\tCopyright 2017 ICR -- Dimitrios Kleftogiannis -- dimitrios.kleftogiannis@icr.ac.uk\n')
        printUsage()
    else:
        print('************************************************************************************************************************************\n')
        print('\t\t\tfilterVCF.py: Parse a VCF and report somatic and germline variants based on specific criteria\n')
        print('\t\t\t\t\t\t\tCEC Bioinformatics Team\n')
        print('\t\t\t\tCopyright 2017 ICR -- Dimitrios Kleftogiannis -- dimitrios.kleftogiannis@icr.ac.uk\n')
        #parse the first input arguments 
        #here if the user does not write the correct argument name it gets an error and the program stops
        vcfFile=sys.argv[1].split('vcfFile=')
        vcfFile=vcfFile[1]
        #parse the second argument
        normalName=sys.argv[2].split('normalName=')
        normalName=normalName[1]
        #print the arguments given by user; is good for 'self' debugging
        print('Execution started with the following parameters:\n')
        print('1. vcfFile         :         \t\t\t\t%s' % vcfFile)
        print('2. normalName      :         \t\t\t\t%s' % normalName)
        
        #find the prefix of the VCF
        #the file has to be separated by '_'
        #based on our format the patients name is always the first
        vcfPrefix=vcfFile[:-3]

        #generate the sam file
        ts = time.time()
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        print('\n[%s] Function parseVCF: parsing the input VCF'%(st))
        parseVCF(vcfFile,normalName,vcfPrefix)

#this is where we start
if __name__=='__main__':
    myMain()

