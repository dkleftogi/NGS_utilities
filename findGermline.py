#!/usr/local/bin/python

'''
			Parse a VCF file and filter the fields that correspond to the germline sample.
                            The germline name has to be given by the user.

BEGIN COPYRIGHT NOTICE

     findGermline code -- (c) 2018 Dimitrios Kleftogiannis -- ICR -- www.icr.ac.uk

     Copyright 2018 Dimitrios Kleftogiannis Licensed under the
     Educational Community License, Version 2.0 (the "License"); you may
     not use this file except in compliance with the License. You may
     obtain a copy of the License at

     https://opensource.org/licenses/ECL-2.0

     Unless required by applicable law or agreed to in writing,
     software distributed under the License is distributed on an "AS IS"
     BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
     or implied. See the License for the specific language governing
     permissions and limitations under the License.

     Published reports of research using this code (or a modified version) should cite the 
     relevant article of this program.

     Comments and bug reports are welcome.
       
     Email to dimitrios.kleftogiannis@icr.ac.uk 
     
     I would also appreciate hearing about how you used this code, improvements that you have made to it.
 
     You are free to modify, extend or distribute this code, as long as this copyright notice is included whole and unchanged. 

END COPYRIGHT NOTICE
 
UTILITY
   The program takes as input a VCF file with one germline (e.g., normal) and more than one tumour files. 
   The normal file name is given by the user as input.
   The program identifies the fields in the input that correspond to the germline sample and reports them in a separate vcf file.


INPUT ARGUMENTS
    
    1. VCF file                     : a vcf file, preferably generated by Platypus and annotated by VEP
    
    2. normalName                   : the normal sample identifier. This has to exactly as in the header of the VCF. 
                              
OUTPUT 
    
    The program parses the original VCF and generates a new VCF that contains only the germline info ending with .GermlineInfo.vcf

DEPENDENCIES
    
    This is a Python program, thus you need the Python 2 compiler to be installed in your computer.
    
    The program has been developed and tested in a Mac OS computer with El Capitan version 10.11.5
    
    The Python compiler used for development is the Python Python 2.7.10 (default, Oct 23 2015, 19:19:21)
    
    The program works for Unix-like systems but has not been tested for Windows operating systems. 
    
    The program has not been tested in Cygwing-like systems running under Windows operating systems.   

RUNNING
	
	An execution example is as follows:

    python findGermline.py vcfFile=CA36_MutPlat_20.vep.vcf normalName=GermlineA36

    To obtain toy data used during the code developement please contact Dimitrios

'''

#modules we need, I might have some extra that didnt use in the final version, but I forgot to remove.
#Remember that this program is under-developement so you may find block of codes used for testing.
import sys
import os
import re
from collections import defaultdict
from itertools import groupby
import datetime
import time
import gzip

#prints information about program's execution
def printUsage():
    print('To run this program please type the following:')
    print('\tpython findGermline.py vcfFile=file.vep.vcf normalName=my_name\n')
    print('Where:\n') 
    print('\tfile.vep.vcf is VCF file annotated by VEP. Preferably in VCFv4.0 format as generated by the Platypus variant caller\n')
    print('\tmy_name is the name for the normal sample. It has to be the same as in the header of the original VCF')

    print('\nExecution example:\n') 
    print('\tpython findGermline.py vcfFile=CA36_MutPlat_20.vep.vcf normalName=GermlineA36 \n')
    print('Please give the arguments in the indicated order similar to the provided example!\n') 

#scan the file, and first identify the position of the germline...based on this info simply scan again and report...
def parseVCF(vcfFile,normalName,vcfPrefix):

    #mock variables
    a=0
    normalPOS=-2;
    header=''
    outGermFileName=vcfPrefix+'.GermlineInfo.vcf'
    outGermFile=open(outGermFileName,'w')
    #check if the file exists
    if os.path.exists(vcfFile):
        #the file exists
        InVcfFile=open(vcfFile,'r')
        for eachLine in InVcfFile:
            if eachLine[0]=='#' and eachLine[1]=='#':
                #this is the main header
                a=a+1
                outGermFile.write(eachLine)
            elif eachLine[0]=='#' and eachLine[1]!='#':
                #this is the line I want to scan
                header=eachLine
                line=eachLine.rstrip('\n')
                tmp=line.split('\t')
                #the VCF format up to the 8 column is the same...
                #we want from 9 till the end....
                tmp=tmp[9:]
                #we need to scan the tmp and find where the normal is
                normalPOS=tmp.index(normalName)
                outGermFile.write('#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\t%s\n'%normalName)
            else:
                break
        InVcfFile.close()
        #now we need to parse again the file and process the positions
        InVcfFile=open(vcfFile,'r')

        for eachLine in InVcfFile:
            #now simply skip the header
            if eachLine[0]!='#':
                line=eachLine.rstrip('\n')
                tmp=line.split('\t')
                chrom = tmp[0]
                pos = tmp[1]
                varID = tmp[2]
                ref = tmp[3]
                alt = tmp[4]
                qual = tmp[5]
                myfilter = tmp[6] 
                info = tmp[7]
                format = tmp[8]
                #take the fileds for normal and germline
                #this is a trick I do to find the germline based on its location in the header file
                variantValues=tmp[9:]
                k=0
                germline=''
                tumour=[]
                for idx in variantValues:
                    if k==normalPOS:
                        germline=idx
                        k=k+1
                    else:
                        tumour.append(idx)
                        k=k+1
                outGermFile.write('%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n'%(chrom,pos,varID,ref,alt,qual,myfilter,info,format,germline))
        outGermFile.close()

    else:
        ts = time.time()
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        print('[%s] ERROR from function: parseVCF. The input VCF file does not exist!\n'%(st))
        print('************************************************************************************************************************************\n')
        sys.exit()

#main function of the program
def myMain():
    #check the number of input arguments
    if len(sys.argv)!=3:
        print('************************************************************************************************************************************\n')
        print('\t\t\t\t\tYour input arguments are not correct!\n')
        print('\t\t\t\t\t\tCEC Bioinformatics Team\n')
        print('\t\t\tCopyright 2018 ICR -- Dimitrios Kleftogiannis -- dimitrios.kleftogiannis@icr.ac.uk\n')
        printUsage()
    else:
        print('************************************************************************************************************************************\n')
        print('\tfindGermline.py: Parse a VCF and find the info that corresponds to germline\n')
        print('\t\t\t\t\t\t\tCEC Bioinformatics Team\n')
        print('\t\t\t\tCopyright 2017 ICR -- Dimitrios Kleftogiannis -- dimitrios.kleftogiannis@icr.ac.uk\n')
        #parse the first input arguments 
        #here if the user does not write the correct argument name it gets an error and the program stops
        vcfFile=sys.argv[1].split('vcfFile=')
        vcfFile=vcfFile[1]
        #parse the second argument
        normalName=sys.argv[2].split('normalName=')
        normalName=normalName[1]
        #print the arguments given by user; is good for 'self' debugging
        print('Execution started with the following parameters:\n')
        print('1. vcfFile         :         \t\t\t\t%s' % vcfFile)
        print('2. normalName      :         \t\t\t\t%s' % normalName)
        
        #find the prefix of the VCF
        #the file has to be separated by '_'
        #based on our format the patients name is always the first
        vcfPrefix=vcfFile[:-4]

        #parse the original VCF file
        ts = time.time()
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        print('\n[%s] Function parseVCF: parsing the input VCF'%(st))
        parseVCF(vcfFile,normalName,vcfPrefix)
        

#this is where we start
if __name__=='__main__':
    myMain()

